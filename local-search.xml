<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ProjectEuler009</title>
    <link href="/2022/09/09/ProjectEuler009/"/>
    <url>/2022/09/09/ProjectEuler009/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>毕达哥拉斯三元数是指一类三个自然数的集合，其中<spanclass="math inline">\(a &lt; b &lt; c\)</span>且<spanclass="math inline">\(a^2+b^2=c^2\)</span>，例如<spanclass="math inline">\(32+42=52\)</span>。仅存在一组毕达哥拉斯三元数使得<spanclass="math inline">\(a+b+c=1000\)</span>，求<spanclass="math inline">\(abc\)</span>。</p>          </div><p>勾股数可以写成如下形式，<span class="math inline">\(m &gt; n &gt; 0,k &gt; 0\)</span></p><p><span class="math display">\[\left\{               \begin{array}{}             \begin{aligned}             a &amp;= k(m^2-n^2)  \\               b &amp;= 2kmn\\               c &amp;= k(m^2+n^2)             \end{aligned}             \end{array}  \right.\]</span></p><p>所以有<span class="math inline">\(km(m+n)=500=2^2 \cdot5^3\)</span>，易见一组解</p><p><span class="math display">\[\left\{               \begin{array}{}             \begin{aligned}             m &amp;= 4  \\               n &amp;= 1 \\               k &amp;= 25             \end{aligned}             \end{array}  \right.\]</span></p>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler008</title>
    <link href="/2022/09/09/ProjectEuler008/"/>
    <url>/2022/09/09/ProjectEuler008/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>在下面1000位数中，寻找连续十三数的最大乘积，这个乘积是多少？</p>          </div><p>挺没意思的。</p>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler007</title>
    <link href="/2022/09/09/ProjectEuler007/"/>
    <url>/2022/09/09/ProjectEuler007/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>求第10001个质数。</p>          </div><p><span class="math inline">\(p_n\)</span>表示第<spanclass="math inline">\(n\)</span>个质数，由此可以得到第10001个质数的上界114320，然后欧拉筛找到其中第10001个质数即可。<span class="math display">\[\log(n\log(n))-1 \le \frac{p_n}{n} \le \log(n\log(n))\]</span> <figure class="highlight cpp"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ydrtp5l7u86581"></i><span>cpp</span><div class="collapse" id="collapse-ydrtp5l7u86581"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> MAXN = <span class="hljs-number">114320</span>;<br><span class="hljs-type">int</span> visit[MAXN];<br><span class="hljs-type">int</span> prime[<span class="hljs-number">10001</span>];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(visit, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(visit));<br><span class="hljs-built_in">memset</span>(prime, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(prime));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; MAXN; i++) &#123;<br><span class="hljs-keyword">if</span> (!visit[i]) prime[cnt++] = i;<br><span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">10001</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cnt; j++) &#123;<br><span class="hljs-keyword">if</span> (i * prime[j] &gt;= MAXN) <span class="hljs-keyword">break</span>;<br>visit[i * prime[j]] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>std::cout &lt;&lt; prime[cnt<span class="hljs-number">-1</span>] &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></p>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler006</title>
    <link href="/2022/09/08/ProjectEuler006/"/>
    <url>/2022/09/08/ProjectEuler006/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>求前一百个自然数的和的平方与平方的和之间的差值。</p>          </div><p><span class="math display">\[(\frac{n^2+n}{2})^2 - \frac{n(n+1)(2n+1)}{6}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler005</title>
    <link href="/2022/09/08/ProjectEuler005/"/>
    <url>/2022/09/08/ProjectEuler005/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>2520是可以被从一到十所有自然数整除的最小的数，即为从一到十的自然数的最小公倍数，求从一到二十所有自然数的最小公倍数。</p>          </div><p>16*9*5*7*11*13*17*19</p><p>对于求从1到n所有自然数的最小公倍数，只需要看其中每个质数的最大次幂。</p>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler004</title>
    <link href="/2022/09/08/ProjectEuler004/"/>
    <url>/2022/09/08/ProjectEuler004/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>回文数即从正反两边读都是一样的数，两个二位数的乘积中最大的回文数为9009=91*99，寻找两个三位数乘积中最大的回文数。</p>          </div><figure class="highlight cpp"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-1bmwswl7t0fdj3"></i><span>cpp</span><div class="collapse" id="collapse-1bmwswl7t0fdj3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">110</span>; i &lt; <span class="hljs-number">1000</span>; i += <span class="hljs-number">11</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">100</span>; j &lt; <span class="hljs-number">1000</span>; j++) &#123;<br>std::string a = std::<span class="hljs-built_in">to_string</span>(i * j);<br>std::string b = a;<br>std::<span class="hljs-built_in">reverse</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> (a == b) ans = (ans &gt; i * j) ? ans : i * j;<br>&#125;<br>&#125;<br>std::cout &lt;&lt; ans &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler003</title>
    <link href="/2022/09/08/ProjectEuler003/"/>
    <url>/2022/09/08/ProjectEuler003/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>13195的质因数分别为5，7，13与29，600851475143最大的质因数是多少？</p>          </div><figure class="highlight c++"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-a4rzonl7sz688e"></i><span>c++</span><div class="collapse" id="collapse-a4rzonl7sz688e"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> N = <span class="hljs-number">600851475143</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (i * i &lt; N) &#123;<br><span class="hljs-keyword">while</span> (N % i == <span class="hljs-number">0</span>) N /= i;<br>i += (i == <span class="hljs-number">2</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>;<br>&#125;<br><br>std::cout &lt;&lt; N &lt;&lt; std::endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler</title>
    <link href="/2022/09/08/ProjectEuler/"/>
    <url>/2022/09/08/ProjectEuler/</url>
    
    <content type="html"><![CDATA[<h1 id="欧拉计划解题目录">欧拉计划解题目录</h1><p><ahref="https://zhoutq1998.github.io/2022/09/06/ProjectEuler001/">PE001</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/06/ProjectEuler002/">PE002</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/08/ProjectEuler003/">PE003</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/08/ProjectEuler004/">PE004</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/08/ProjectEuler005/">PE005</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/08/ProjectEuler006/">PE006</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/09/ProjectEuler007/">PE007</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/09/ProjectEuler008/">PE008</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/09/ProjectEuler009/">PE009</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/06/ProjectEuler097/">PE097</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/07/ProjectEuler303/">PE303</a></p><p><ahref="https://zhoutq1998.github.io/2022/08/25/ProjectEuler501/">PE501</a></p><p><ahref="https://zhoutq1998.github.io/2022/09/05/ProjectEuler700/">PE700</a></p>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler303</title>
    <link href="/2022/09/07/ProjectEuler303/"/>
    <url>/2022/09/07/ProjectEuler303/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>正整数n的有些正倍数在十进制下所有数字均<spanclass="math inline">\(\leq 2\)</span>，记其中最小的为<spanclass="math inline">\(f(n)\)</span>。</p><p>比如<span class="math inline">\(f(2)=2, f(3)=12, f(7)=21, f(9)=12222,f(10)=10, f(42)=210, f(89)=1121222\)</span>。</p><p>此外，已知<spanclass="math inline">\(\sum_{n=1}^{100}\frac{f(n)}{n}=11363107\)</span></p><p>求<spanclass="math inline">\(\sum_{n=1}^{10000}\frac{f(n)}{n}\)</span></p>          </div><p>可以先根据同余的性质求出<spanclass="math inline">\(f(n)\)</span>的位数<spanclass="math inline">\(k\)</span>，即多少位数能够出现模<spanclass="math inline">\(n\)</span>余0，然后根据前面求出来的同余表，倒推最小的<spanclass="math inline">\(k\)</span>位解。</p><p>最后Python版本用时20s，C++版本用时0.7s <figure class="highlight python"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-dvazyvl7u6n1x0"></i><span>python</span><div class="collapse" id="collapse-dvazyvl7u6n1x0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>():<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-comment"># -1 平凡解，0 无解，1有解</span><br>        remain = [[-<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>] * (n-<span class="hljs-number">1</span>)]<br>        <span class="hljs-comment"># k表示位数</span><br>        k = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> remain[k][<span class="hljs-number">0</span>] != <span class="hljs-number">1</span>:<br>            next_digit = remain[k][:]<br>            digit_remain = <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, k, n)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">if</span> remain[k][i] != <span class="hljs-number">0</span>:<br>                    next_digit[(i + digit_remain) % n] = <span class="hljs-number">1</span><br>                    next_digit[(i + <span class="hljs-number">2</span> * digit_remain) % n] = <span class="hljs-number">1</span><br>            remain.append(next_digit)<br>            k += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 现在证明了k位解的存在性，只需要找到那个解，倒推，目前解模n余0</span><br>        res = <span class="hljs-number">0</span><br>        now_remain = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            digit_remain = <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i, n)<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> i == k-<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>), <span class="hljs-number">3</span>):<br>                new_remain = (now_remain - j * digit_remain) % n<br>                <span class="hljs-keyword">if</span> remain[i][new_remain] != <span class="hljs-number">0</span>:<br>                    res = <span class="hljs-number">10</span> * res + j<br>                    now_remain = new_remain<br>                    <span class="hljs-keyword">break</span><br>        <br>        <span class="hljs-keyword">return</span> res<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([cal(i) // i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10001</span>)])<br></code></pre></td></tr></table></div></figure></p><figure class="highlight cpp"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-dhhoqel7u6n1x0"></i><span>cpp</span><div class="collapse" id="collapse-dhhoqel7u6n1x0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Mod</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span> mod)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> (num % mod + mod) % mod;  <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> mod)</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (y) &#123;<br>        <span class="hljs-keyword">if</span>(y &amp; <span class="hljs-number">1</span>) res = res * x % mod;<br>        x = x * x % mod;<br>        y = y / <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">int</span> remain[<span class="hljs-number">30</span>][n];<br>    <span class="hljs-built_in">memset</span>(remain, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(remain));<br>    remain[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(remain[k][<span class="hljs-number">0</span>] != <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">memcpy</span>(remain[k+<span class="hljs-number">1</span>], remain[k], <span class="hljs-built_in">sizeof</span>(remain[k]));<br>        <span class="hljs-type">int</span>* next_digit = remain[k+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> digit_remain = <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, k, n);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(remain[k][i] != <span class="hljs-number">0</span>)&#123;<br>                next_digit[(i + digit_remain) % n] = <span class="hljs-number">1</span>;<br>                next_digit[(i + <span class="hljs-number">2</span> * digit_remain) % n] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        k += <span class="hljs-number">1</span>;<br>        <br>    &#125;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> now_remain = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = k - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br><br>        <span class="hljs-type">int</span> digit_remain = <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, i, n);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>((i == k - <span class="hljs-number">1</span>) &amp; (j == <span class="hljs-number">0</span>)) <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-type">int</span> new_remain = <span class="hljs-built_in">Mod</span>(now_remain - j * digit_remain, n);<br><br>            <span class="hljs-keyword">if</span>(remain[i][new_remain] != <span class="hljs-number">0</span>)&#123;<br>                res *= <span class="hljs-number">10</span>;<br>                res += j;<br>                now_remain = new_remain;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">time_t</span> start, end;<br>    start = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10001</span>; i++) ans += (<span class="hljs-built_in">cal</span>(i) / i);<br><br>    end = <span class="hljs-built_in">clock</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;time: &quot;</span> &lt;&lt; (end - start) / <span class="hljs-number">1000.0</span> / <span class="hljs-number">1000.0</span> &lt;&lt; <span class="hljs-string">&#x27;s&#x27;</span> &lt;&lt; endl;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler002</title>
    <link href="/2022/09/06/ProjectEuler002/"/>
    <url>/2022/09/06/ProjectEuler002/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>斐波那契序列中的数都是由前两项加总得出，假设第一与第二项为1与2，则前十项分别为：</p><p>1，2，3，5，8，13，21，34，55，89</p><p>考虑不超过四百万的斐波那契数，计算其中偶数斐波那契数的和。</p>          </div><figure class="highlight python"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-s8bpsll7rcwo3p"></i><span>python</span><div class="collapse" id="collapse-s8bpsll7rcwo3p"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>():<br>a, b = <span class="hljs-number">2</span>, <span class="hljs-number">8</span><br>res = a<br><span class="hljs-keyword">while</span> b &lt; <span class="hljs-number">4e6</span>:<br>res += b<br>a, b = b, <span class="hljs-number">4</span> * b + a<br><span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler001</title>
    <link href="/2022/09/06/ProjectEuler001/"/>
    <url>/2022/09/06/ProjectEuler001/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>如果我们将小于10的所有是3或5倍数的自然数列出来，我们得到3，5，6和9，它们的和是23。与之类似，计算1000以下所有是3或5的倍数的自然数的和。</p>          </div><figure class="highlight python"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-3mvx90l7q5bclh"></i><span>python</span><div class="collapse" id="collapse-3mvx90l7q5bclh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>():<br>    res = <span class="hljs-number">334</span> * <span class="hljs-number">333</span> / <span class="hljs-number">2</span> * <span class="hljs-number">3</span> + <span class="hljs-number">200</span> * <span class="hljs-number">199</span> / <span class="hljs-number">2</span> * <span class="hljs-number">5</span> - <span class="hljs-number">67</span> * <span class="hljs-number">66</span> / <span class="hljs-number">2</span> * <span class="hljs-number">15</span><br>    <span class="hljs-keyword">return</span> res<br><br><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler097</title>
    <link href="/2022/09/06/ProjectEuler097/"/>
    <url>/2022/09/06/ProjectEuler097/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>第一个超过一百万位的素数是在1999年被发现的，它是一个具有<spanclass="math inline">\(2^{6972593}−1\)</span>形式的梅森素数，它总共有2,098,960位。之后更多的具有<spanclass="math inline">\(2^p−1\)</span>形式的梅森素数被发现，并表包含更多的位数。然而，2004年人们发现了一个巨大的非梅森素数<spanclass="math inline">\(28433×2^{7830457}+1\)</span>，它共有2,357,207位，求这个素数的最后十位数字。</p>          </div><p>手算也可以，套同余的各种定理即可，不过还是Python比较香。<figure class="highlight python"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-l1v4tul7q215tv"></i><span>python</span><div class="collapse" id="collapse-l1v4tul7q215tv"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>():<br>    res = (<span class="hljs-number">28433</span>*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">7830457</span>,<span class="hljs-number">10</span>**<span class="hljs-number">10</span>)+<span class="hljs-number">1</span>)%(<span class="hljs-number">10</span>**<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></div></figure></p>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler700</title>
    <link href="/2022/09/05/ProjectEuler700/"/>
    <url>/2022/09/05/ProjectEuler700/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>莱昂哈德·欧拉出生于1707年4月15日，所以让我们考虑以下序列： <spanclass="math inline">\(1504170715041707n\mod 4503599627370517\)</span>该序列中的某个元素被定义为欧拉币，当且仅当它严格小于之前已经定义的所有欧拉币。如，序列的第一项是1504170715041707，这是第一枚欧拉币；第二项是3008341430083414，因为它大于1504170715041707，所以它不是欧拉币。序列的第三项是8912517754604，比第一项要小，因此是一枚新的欧拉币。因此，前两枚欧拉币之和为1513083232796311。求所有欧拉币之和。</p>          </div><p>为书写方便，记<span class="math inline">\(a=1504170715041707,b=4503599627370517, c_0=a\)</span>，第0个欧拉币是<spanclass="math inline">\(a\)</span>。</p><p>对于第一个欧拉币，有<span class="math inline">\(c_1 = an_1 -b\)</span>，<span class="math inline">\(n_1\)</span>是满足<spanclass="math inline">\(an &gt;b\)</span>的最小整数，出现下一个欧拉币<spanclass="math inline">\(c_2\)</span>是当有若干个<spanclass="math inline">\(c_1\)</span>之和恰好超过<spanclass="math inline">\(a\)</span>之后，使得<spanclass="math inline">\(c_1n_2+a(n_2n_1-1)&gt;bn_2\)</span>，此时<spanclass="math inline">\(c_2 = c_1n_2 - a\)</span>，可以以此类推下去。</p><p>因此通过辗转相除法可以求出每一个欧拉币。注意<spanclass="math inline">\(c\)</span>是<spanclass="math inline">\(an\)</span>比<spanclass="math inline">\(b\)</span>大的部分，所以要对<spanclass="math inline">\(a,-b\)</span>做辗转相除法。 <spanclass="math display">\[\begin{equation}\begin{aligned}-b &amp;= -an_1+c_1\\-a &amp;= -c_1n_2 + c_2 \\&amp;...\\-c_{k-2} &amp;= -c_{k-1}n_k+c_k \\-c_{k-1} &amp;= -c_{k}n_{k+1}\end{aligned}\end{equation}\]</span></p><p><span class="math inline">\(c_0, ...,c_k\)</span>之和即为所求。再由<span class="math inline">\(-c_{k-2} =-c_{k-1}n_k+c_k\)</span>可知 <span class="math display">\[c_k = -c_{k-2} \mod c_{k-1}\]</span></p><figure class="highlight python"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-2jwoeyl7q0pfad"></i><span>python</span><div class="collapse" id="collapse-2jwoeyl7q0pfad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>():<br>c = <span class="hljs-number">1504170715041707</span><br>nc = -<span class="hljs-number">4503599627370517</span> % <span class="hljs-number">1504170715041707</span><br>res = c + nc<br><span class="hljs-keyword">while</span> nc &gt; <span class="hljs-number">0</span>:<br>c, nc = nc, (-c)%nc<br>res += nc<br><span class="hljs-keyword">return</span> nc<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Meissel-Lehmer算法</title>
    <link href="/2022/08/26/Meissel-Lehmer%E7%AE%97%E6%B3%95/"/>
    <url>/2022/08/26/Meissel-Lehmer%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><span class="math inline">\(\pi(n)\)</span>表示小于等于<spanclass="math inline">\(n\)</span>的正整数中有多少是质数，最基础的欧式线性筛可以<ahref="https://www.ams.org/journals/mcom/1985-44-170/S0025-5718-1985-0777285-5/S0025-5718-1985-0777285-5.pdf">算法来自于这篇论文</a></p>]]></content>
    
    
    <categories>
      
      <category>数论</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ProjectEuler501</title>
    <link href="/2022/08/25/ProjectEuler501/"/>
    <url>/2022/08/25/ProjectEuler501/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>24的八个约数是1、2、3、4、6、8、12和24。在不超过100的数中有十个数恰好有八个约数，分别是24、30、40、42、54、56、66、70、78和88。在不超过n的数中，记有f(n)个数恰好有八个约数。 已知f(100) = 10，f(1000) =180以及f(106) = 224427。 求f(1012)。</p>          </div><p>根据素数分解定理，每一个自然数<spanclass="math inline">\(n\)</span>都能唯一分解为素数乘积 <spanclass="math display">\[n = p_1^{a_1}p_2^{a_2}...p_k^{a_k}\]</span></p><p>显然，<span class="math inline">\(n\)</span>的约数有<spanclass="math inline">\((a_1+1)(a_2+1)...(a_k+1)\)</span>个，那么对于8个约数的情况，可以反推出<spanclass="math inline">\(n\)</span>必然形如 <span class="math display">\[p_1p_2p_3\]</span></p><p><span class="math display">\[p_1^3p_2\]</span></p><p><span class="math display">\[p_1^7\]</span></p><figure class="highlight c++"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-0o0i93l7pz2ew0"></i><span>c++</span><div class="collapse" id="collapse-0o0i93l7pz2ew0"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">2e6</span>+<span class="hljs-number">5</span>;  <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">7</span>;      <br><br>vector&lt;<span class="hljs-type">int</span>&gt; lp, primes, pi;<br><span class="hljs-type">int</span> phi[MAX+<span class="hljs-number">1</span>][M+<span class="hljs-number">1</span>], sz[M+<span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">factor_sieve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>lp.<span class="hljs-built_in">resize</span>(MAX);<br>pi.<span class="hljs-built_in">resize</span>(MAX);<br>lp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>pi[<span class="hljs-number">0</span>] = pi[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; MAX; i++) &#123;<br><span class="hljs-keyword">if</span> (lp[i] == <span class="hljs-number">0</span>) &#123;<br>lp[i] = i;<br>primes.<span class="hljs-built_in">emplace_back</span>(i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; primes.<span class="hljs-built_in">size</span>() &amp;&amp; primes[j] &lt;= lp[i]; j++) &#123;<br><span class="hljs-type">int</span> x = i * primes[j];<br><span class="hljs-keyword">if</span> (x &gt;= MAX) <span class="hljs-keyword">break</span>;<br>lp[x] = primes[j];<br>&#125;<br>pi[i] = primes.<span class="hljs-built_in">size</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">factor_sieve</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= MAX; i++) &#123;<br>phi[i][<span class="hljs-number">0</span>] = i;<br>&#125;<br>sz[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++) &#123;<br>sz[i] = primes[i<span class="hljs-number">-1</span>]*sz[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= MAX; j++) &#123;<br>phi[j][i] = phi[j][i<span class="hljs-number">-1</span>] - phi[j/primes[i<span class="hljs-number">-1</span>]][i<span class="hljs-number">-1</span>];<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sqrt2</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> r = <span class="hljs-built_in">sqrt</span>(x - <span class="hljs-number">0.1</span>);<br><span class="hljs-keyword">while</span> (r*r &lt;= x) ++r;<br><span class="hljs-keyword">return</span> r - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cbrt3</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> r = <span class="hljs-built_in">cbrt</span>(x - <span class="hljs-number">0.1</span>);<br><span class="hljs-keyword">while</span>(r*r*r &lt;= x) ++r;<br><span class="hljs-keyword">return</span> r - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">getphi</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x, <span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(s == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">if</span>(s &lt;= M)<br>  &#123;<br><span class="hljs-keyword">return</span> phi[x%sz[s]][s] + (x/sz[s])*phi[sz[s]][s];<br>&#125;<br><span class="hljs-keyword">if</span>(x &lt;= primes[s<span class="hljs-number">-1</span>]*primes[s<span class="hljs-number">-1</span>])<br>  &#123;<br><span class="hljs-keyword">return</span> pi[x] - s + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(x &lt;= primes[s<span class="hljs-number">-1</span>]*primes[s<span class="hljs-number">-1</span>]*primes[s<span class="hljs-number">-1</span>] &amp;&amp; x &lt; MAX)<br>  &#123;<br><span class="hljs-type">int</span> sx = pi[<span class="hljs-built_in">sqrt2</span>(x)];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = pi[x] - (sx+s<span class="hljs-number">-2</span>)*(sx-s+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = s+<span class="hljs-number">1</span>; i &lt;= sx; ++i) &#123;<br>ans += pi[x/primes[i<span class="hljs-number">-1</span>]];<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">getphi</span>(x, s<span class="hljs-number">-1</span>) - <span class="hljs-built_in">getphi</span>(x/primes[s<span class="hljs-number">-1</span>], s<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">getpi</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x &lt; MAX)   <span class="hljs-keyword">return</span> pi[x];<br><span class="hljs-type">int</span> cx = <span class="hljs-built_in">cbrt3</span>(x), sx = <span class="hljs-built_in">sqrt2</span>(x);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-built_in">getphi</span>(x, pi[cx]) + pi[cx] - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = pi[cx]+<span class="hljs-number">1</span>, ed = pi[sx]; i &lt;= ed; i++)<br>  &#123;<br>ans -= <span class="hljs-built_in">getpi</span>(x/primes[i<span class="hljs-number">-1</span><span class="hljs-number">-1</span>]) - i + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">lehmer_pi</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x &lt; MAX)   <span class="hljs-keyword">return</span> pi[x];<br><span class="hljs-type">int</span> a = (<span class="hljs-type">int</span>)<span class="hljs-built_in">lehmer_pi</span>(<span class="hljs-built_in">sqrt2</span>(<span class="hljs-built_in">sqrt2</span>(x)));<br><span class="hljs-type">int</span> b = (<span class="hljs-type">int</span>)<span class="hljs-built_in">lehmer_pi</span>(<span class="hljs-built_in">sqrt2</span>(x));<br><span class="hljs-type">int</span> c = (<span class="hljs-type">int</span>)<span class="hljs-built_in">lehmer_pi</span>(<span class="hljs-built_in">cbrt3</span>(x));<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-built_in">getphi</span>(x, a) + (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)(b + a - <span class="hljs-number">2</span>) * (b - a + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a + <span class="hljs-number">1</span>; i &lt;= b; i++)<br>  &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> w = x / primes[i<span class="hljs-number">-1</span>];<br>sum -= <span class="hljs-built_in">lehmer_pi</span>(w);<br><span class="hljs-keyword">if</span> (i &gt; c) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> lim = <span class="hljs-built_in">lehmer_pi</span>(<span class="hljs-built_in">sqrt2</span>(w));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= lim; j++)<br>    &#123;<br>sum -= <span class="hljs-built_in">lehmer_pi</span>(w / primes[j<span class="hljs-number">-1</span>]) - (j - <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> x = <span class="hljs-number">1</span>, y = a;<br><span class="hljs-keyword">while</span>(b)<br>  &#123;<br><span class="hljs-keyword">if</span> (b&amp;<span class="hljs-number">1</span>)  x = x * y;<br>y = y * y;<br>b &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">init</span>();<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>, val = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// case : p^7 &lt;= n ,p is a prime</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; primes.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        <span class="hljs-comment">// for example 2^7 = 128 &lt;=n</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">power</span>(primes[i], <span class="hljs-number">7</span>) &lt;= n) &#123;<br>          <span class="hljs-comment">//std::cout &lt;&lt; primes[i] &lt;&lt; &#x27;\n&#x27;;</span><br>ans += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>    <span class="hljs-comment">//  std::cout &lt;&lt; &quot;ans = &quot; &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;;</span><br><br><span class="hljs-comment">// case : p^3*q &lt;= n (assume q &gt; p for finding unique pairs)</span><br>       <span class="hljs-comment">// p, q is distinct primes</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; primes.<span class="hljs-built_in">size</span>(); i++) <span class="hljs-comment">//p</span><br>  &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> x = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)primes[i]*primes[i]*primes[i]; <span class="hljs-comment">// p^3</span><br>x = n / x; <span class="hljs-comment">//q</span><br>val = <span class="hljs-built_in">lehmer_pi</span>(x);<br><span class="hljs-keyword">if</span> (x &gt;= primes[i]) &#123;<br>val -= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (val &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>ans += val;<br>&#125;<br><span class="hljs-comment">//case : p*q*r &lt;= n (assume r &gt; q &gt; p for finding unique pairs)</span><br>        <span class="hljs-comment">// p,q,r is distinct primes</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; primes.<span class="hljs-built_in">size</span>(); i++) <span class="hljs-comment">// p</span><br>  &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">power</span>(primes[i], <span class="hljs-number">3</span>) &gt; n) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; primes.<span class="hljs-built_in">size</span>(); j++) <span class="hljs-comment">// q</span><br>           &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> x = n / ((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)primes[i]*primes[j]);<br>              <span class="hljs-keyword">if</span>(x &lt; j)<span class="hljs-keyword">continue</span>;<br>val = <span class="hljs-built_in">lehmer_pi</span>(x); <span class="hljs-comment">// r</span><br>val -= j+<span class="hljs-number">1</span>; <span class="hljs-comment">// 减去 计算 &lt;=x 的素数个数中多余的</span><br><span class="hljs-keyword">if</span> (val &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>ans += val;<br>&#125;<br>&#125;<br>std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>  cerr &lt;&lt; <span class="hljs-string">&quot;Time elapsed: &quot;</span> &lt;&lt; <span class="hljs-number">1.0</span> * <span class="hljs-built_in">clock</span>() / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot; s.\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* code */</span><br>  <span class="hljs-built_in">solve</span>(<span class="hljs-number">1e12</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>欧拉计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>韦伯望远镜下的土星</title>
    <link href="/2022/08/23/%E9%9F%A6%E4%BC%AF%E6%9C%9B%E8%BF%9C%E9%95%9C%E4%B8%8B%E7%9A%84%E5%9C%9F%E6%98%9F/"/>
    <url>/2022/08/23/%E9%9F%A6%E4%BC%AF%E6%9C%9B%E8%BF%9C%E9%95%9C%E4%B8%8B%E7%9A%84%E5%9C%9F%E6%98%9F/</url>
    
    <content type="html"><![CDATA[<center><p><img src="jupiter-auroras1.tif" width="75%" /></p>Figure 1. NIR镜头下的土星</center><p>今天看到<ahref="https://esawebb.org/images/">韦伯望远镜</a>发布了几张土星的照片，惊叹于如今的技术进步，特地记录一下。第一张图是经过近红外（NIR）相机的三种红外滤光片合成，再映射到可见光光谱下得到的。第一个滤光片下看到的是“红色”的土星极光；第二个滤光片得到的是“黄色”和“绿色”的部分，对应的是土星南极、北极的薄雾；第三个滤光片对应的是“蓝色”的深厚云层。而我们熟知的能装下一个地球的“大红斑”因为反射大量太阳光，在图片里显示是白色的。</p><center><p><img src="jupiter-auroras3.tif" width="75%" /></p>Figure 2. NIR镜头下的土星</center><p>第二张图是使用的是不同的滤镜，对应的是一个更宽广的视野。Io是木卫一，是宙斯的恋人之一；Amalthea是木卫五，是守护婴儿时期宙斯的山羊，也有一说是喂养宙斯山羊奶的仙女；Adrastea是木卫十五，是宙斯的养母。他们都是木星的79颗卫星之一。随着技术发展，发现木星的卫星越来越多，到后来和宙斯有关的名字都不够用了。</p><center><p><img src="weic2208a.jpeg" width="75%" /></p>Figure 3. 斯蒂芬五重奏</center><p>再贴一张我很喜欢的斯蒂芬五重奏（Stephan’sQuintet）。虽说是五重奏，但其实最左边的星系NGC7320离我们只有4000万光年，而另外四个星系离我们有2.9亿光年。当年因为技术所限，误以为它们五个是在一起的。不过“四重奏”为研究星系之间的相互作用，包括它们如何影响彼此恒星的形成，影响星际气体，提供了一个绝妙的观察对象。唉，对我而言，四个星系的纠缠碰撞，场面之宏大已经远远超出想象，哪怕是太阳在这恢弘的宇宙奇观下，也只是微不足道的一粒沙。</p>]]></content>
    
    
    <categories>
      
      <category>记录生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>后门准则与前门准则</title>
    <link href="/2022/08/23/%E5%90%8E%E9%97%A8%E5%87%86%E5%88%99%E4%B8%8E%E5%89%8D%E9%97%A8%E5%87%86%E5%88%99/"/>
    <url>/2022/08/23/%E5%90%8E%E9%97%A8%E5%87%86%E5%88%99%E4%B8%8E%E5%89%8D%E9%97%A8%E5%87%86%E5%88%99/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>第一篇文章！测试一下博客功能，随便写点。</p>          </div><p>为了研究因果效应，首先我们要关心的是因果效应的可识别性。只有当因果效应能够被识别的时候，我们才能进一步去谈因果效应的影响程度。而判断识别性的准则，在因果图模型中，对应的就是“后门准则”和“前门准则”。</p><p>在谈这两个准则之前，先思考一下是什么让因果效应不可识别。回顾一个辛普森悖论的例子，</p><img src="/2022/08/23/%E5%90%8E%E9%97%A8%E5%87%86%E5%88%99%E4%B8%8E%E5%89%8D%E9%97%A8%E5%87%86%E5%88%99/Simpsons_paradox.png" class="" title="辛普森悖论"><h1 id="后门准则">后门准则</h1><img src="/2022/08/23/%E5%90%8E%E9%97%A8%E5%87%86%E5%88%99%E4%B8%8E%E5%89%8D%E9%97%A8%E5%87%86%E5%88%99/backdoor-example.png" class="" title="后门准则示例"><h1 id="前门准则">前门准则</h1>]]></content>
    
    
    <categories>
      
      <category>因果推断</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
